# -*- ispell-dictionary: "english" -*-


#+AUTHOR: David √Ålvarez Rosa
#+EMAIL: david@alvarezrosa.com
#+STARTUP: showall


* LiDAR Compensation üö®

This repository contains the source code of the LiDAR Compensation.


** Getting Started üöÄ
These instructions will get you a copy of the project up and running on your
local machine for development and testing purposes.

*** Prerequisites üìã
Robot Operating System (=ROS=) needs to be installed [[http://wiki.ros.org/kinetic/Installation/Ubuntu][link]] and a =rosbag= with
raw data is needed.
#+BEGIN_SRC bash
  ros-kinetic-desktop-full
#+END_SRC

*** Installing üîß
The folders given are =ROS= packages that need to be inside your workspace
following this structure:
#+BEGIN_SRC text
  your-ws
    build
    devel
    src
      lidar_processing
         dv_perception_pointcloud
         lidar_nn
         perception_msg
         ...
#+END_SRC

Then, the steps are:

*Create workspace and src folder*
#+BEGIN_SRC bash
  mkdir your-ws
  cd your-ws
  mkdir src
  catkin_make
#+END_SRC

*Clone the repository inside src*
#+BEGIN_SRC bash
  cd src
  git clone git@serv-driverless-33:arnau.roche/lidar_processing.git # TODO: change this.
#+END_SRC

*Compile the code (it may take some time the first time)*
#+BEGIN_SRC bash
  cd ..
  catkin_make
#+END_SRC


** Running the algorithm with raw data ‚öôÔ∏è
*Launch the nodelet*
#+BEGIN_SRC bash
  source devel/setup.bash
  roslaunch dv_perception_pointcloud lidar_nodelet.launch
#+END_SRC

Then, the =nodelet= is waiting for the input data.

*Play the rosbag:*
#+BEGIN_SRC bash
  cd <folder_with_rosbags>
  rosrun rqt_bag rqt_bag rosbag_name.bag
#+END_SRC
and publish the =velodyne_points= topic.
or
#+BEGIN_SRC bash
  cd <folder_with_rosbags>
  rosbag play rosbag_name.bag --loop
#+END_SRC
and all the topics in the =rosbags= will be published.
The =nodelet= should start computing and printing results.

*** Visualization üîÆ
Use =RVIZ= to visualize the point cloud and the markers published with the cones
detected:
#+BEGIN_SRC bash
  rviz &
#+END_SRC
and add type of data =PointCloud2= and =MarkerArray=.


** Difficulties üõ†
Ask a Perception member ;)


** Authors ‚úíÔ∏è
Arnau Roche L√≥pez


** Explanation of the code üí°
The main purpose of this code is to compensate the distortion that appears in
the data received from the =LiDAR= due to the movement of the car. This happens
because the =LiDAR= takes non-zero time for completing a turn. Therefore, since
information is return for each full turn, position will be distorted due to the
car movement.

At slow (car) speeds this effect is not noticeable, however at higher speeds
correcting this distortion can be crucial for a correct perception of the
surrounding environment.

For fixing ideas, let's suppose that the =LiDAR= is rotating at a frequency of
*10Hz* and that the car is going (in a straight line) at *25m/s* (90km/h). Then,
there may be points such that the detection time differs by *0.1s* (i.e. a
period). Therefore, by this time the car will have moved (and the =LiDAR= with
it) *2.5m* (0.1s * 25m/s). This is the actual (maximum) distortion.

*** First angle of vision
Obviously, there is not such a thing like the distortion of a complete
=PointCloud=, since it will be different for each point. This distortion
depends on the time between the recording of the first point and the current
one. This elapsed time is proportional to the difference of angles between
points, therefore we will work with angles since they can be more easily
computed.

The first angle of vision *Œ∏‚ÇÄ* is computed as follows:
#+BEGIN_SRC c++
  pcl::PointXYZ& point0 = cloud.points[0];
  float theta0 = atan(-point0.y, point0.x);
#+END_SRC

*** Actual compensation


** Results üéØ
*** Screenshots
**** Acceleration
#+HTML: <img src="img/1. Acceleration.png" width="100%" />
**** Faster acceleration
#+HTML: <img src="img/2. Faster acceleration.png" width="100%" />
**** Lateral compensation in acceleration
#+HTML: <img src="img/3. Lateral compensation in acceleration.png" width="100%" />
**** No compensation - Slow speed
#+HTML: <img src="img/4. No compensation - Slow speed.png" width="100%" />
**** Curved road
#+HTML: <img src="img/5. Curved road.png" width="100%" />












#+HTML: </div>
